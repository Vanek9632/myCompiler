<program>   ::= { <func_decl> | <init_vars_stmt> }

! ===================================================================
! Function  Declaration
! ===================================================================

<func_decl>        ::= <type> <id> '(' <init_params> ')' <statements>
                     | <type> <id> '(' ')' <statements>

<init_params>      ::= <type> <id> ',' <init_params>
                     | <type> <id>

<params>           ::= <param> ',' <params>
                     | <param>

<param>            ::= <expr>

! ===================================================================
! Statements
! ===================================================================

<statements>      ::= '{' { <statement> } '}'

<statement>       ::= <if_else>
                    | <print>
                    | <input>
                    | <while_loop>
                    | <do_while_loop>
                    | <for_loop>
                    | <init_vars_stmt>
                    | <expr_stmt>
                    | <ret_stmt>
                    | ';'

<if_else>         ::= 'if' '(' <expr> ')' <statements>
                    | 'if' '(' <expr> ')' <statements> 'else' <statements>

<print>           ::= 'print' '(' <output_list> ')' ';'
<output_list>     ::= <string> { ',' <expr> }

<input>           ::= 'input' '(' <input_list> ')' ';'
<input_list>      ::= <id> { ',' <id> }

<while_loop>      ::= 'while' '(' <expr> ')' <statements>

<do_while_loop>   ::= 'do' <statements> 'while' '(' <expr> ')' ';'

<for_loop>        ::= 'for' '(' [ <expr> ] ';' [ <expr> ] ';' [ <expr> ] ')' <statements>
                    | 'for' '(' [ <init_vars> ] ';' [ <expr> ] ';' [ <expr> ] ')' <statements>

<expr_stmt>       ::= <expr> ';'

<ret_stmt>        ::= 'return' <expr> ';'
                    | 'return' ';'

! ===================================================================
! Variable Declaration
! ===================================================================

<init_vars_stmt>   ::= <init_vars> ';'

<init_vars>        ::= <type> <var> { ',' <var> }

<var>              ::= <id> '=' <expr>
                     | <id>

<type>             ::= 'int'

! ===================================================================
! Expression
! ===================================================================

<expr>         ::= <assign>

<op_assign>    ::= <id> '='  <op_assign>
                 | <id> '+=' <op_assign>
                 | <id> '-=' <op_assign>
                 | <id> '*=' <op_assign>
                 | <id> '/=' <op_assign>
                 | <id> '%=' <op_assign>
                 | <op_or>

<op_or>        ::= <op_and> { '||' <op_and> }

<op_and>       ::= <op_equate> { '&&' <op_equate> }

<op_equate>    ::= <op_compare> { ( '==' | '!=' ) <op_compare> }

<op_compare>   ::= <op_add> { ( '<' | '>' | '<=' | '>=' ) <op_add> }

<op_add_sub>   ::= <op_mult> { ( '+' | '-' ) <op_mult> }

<op_mult_div>  ::= <op_unary> { ( '*' | '/' | '%' ) <op_unary> }

<op_unary>     ::= '+' <op_unary>
                 | '-' <op_unary>
                 | '++' <id>
                 | '--' <id>
                 | <postfix>

<op_postfix>   ::= <id> '++'
                 | <id> '--'
                 | <factor>

<factor>       ::= <integer>
                 | '(' <expr> ')'
                 | <id> '(' <params> ')'
                 | <id> '(' ')'
                 | <id>

! ===================================================================
! Characters
! ===================================================================

<string>         ::= '\"' { <all_char> } '\"'

<id>             ::= ( <letter> | '_' ) { <letter> | '_' | <digit> }

<integer>        ::= <digit> <integer>
                   | <digit>

<all_char>       ::= all characters according to ascii table

<assign_char>    ::= "=" | "+=" | "-=" | "*=" | "/=" | "%="

<letter>         ::= "a" | "b" | "c" | "d" | ... | "z"
                   | "A" | "B" | "C" | "D" | ... | "Z"

<digit>          ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0"
